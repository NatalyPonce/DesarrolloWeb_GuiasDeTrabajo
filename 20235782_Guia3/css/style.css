@import url(https://fonts.googLeapis.com/css?family=Muli);

*{
    margin: 0;
    padding: 0;
}


body{
    font-family: 'Muli', sans-serif;
    text-align: justify;
}

header{
    background: #16A085;
    height: 130px;
    overflow: hidden;
    position: sticky;
    top: 0;
    z-index: 10;
}

footer{
    margin-top: 20px;
    background: #16A085;
    height: 50px;
    position: sticky;
    bottom: 0;
    z-index: 20;

}

header div, footer div{
    width: 80%;
    margin: 0 auto;
    color: white;
}

h1{
    font-size: 2.3rem;
    margin-bottom: 1rem;
    padding-top: 0.5rem;
}

h2{
    font-size: 2rem;
}

section{
    margin: 0 auto;
    width: 90%;
    overflow: hidden;
    position: relative
}

section article{
    font-size: 0.9rem;
    height: 340px;
    width: 32.33%;
    float: left;
    margin: 0.5%;
    border: 2px dashed #16A085;
    padding: 1%;
    box-sizing: border-box;
    overflow: hidden;
}

section article img{
    height: 180px;
    max-width: 80%;
    display: block;
    margin: 5px auto;
}

section article h3{
    text-align: center;
}

footer div{
    padding-top: 1rem;
}

section article:nth-child(2){
    background-color: rgba(70, 130, 180, 0.9);
    position: static;
    display: none;
    left: 100px;
    top: 50px; /* Por lo que entiendo, cuando se refiere a top 50px, se refiere a que se colocan 50 pixeles en la parte superior, por lo que la caja se va para abajo. Lo mismo pasa con left.*/
}
/*31. No, las cajas no han sustituido el lugar de la caja n°2. El article solo se movió donde le indiqué. Estos se debe a que, con el posicionamiento relativo, el elemento sigue ocupando su espacio original en el flujo. No es como con position absolute, donde el elemento se "sale del plano" y los otros elementos toman su puesto.*/

/*35. Sí, las cajas ocuparon el espacio que dejo el second-child*/

/*36. La diferencia más evidente es que si se pone posicionamiento relativo, los demás elementos no toman el espacio que se deja libre. Esto porque el elemento posicionado no se sale del flujo del documento, aunque visualmente se mueva, eso no afecta el flujo  de los elementos a su alrededor.
Pasa lo contrario con absolute, pues el flujo de los demás elementos sí se ve afectado. Principalmente porque el elemento sale del plano del documento y los elementos a su alrededor se posicionan como si no existiera. A su vez, cuando le indicamos a un elemento relativo sus movimientos, estos los hace en base a la posición original en la que se encontraba. 
Con absolute no, se toma como base la posición del primer padre posicionado.
*/

/*40.Con display none, el elemento parece desaparecer. El flujo de los elementos a su alrededor cambia. Está en el código, pero es como si no existiera en el documento. Por el contrario, visibility: hidden solo lo oculta de forma visual. El elemento no se elimina del flujo, por eso los elementos a su alrededor no toman su lugar. */